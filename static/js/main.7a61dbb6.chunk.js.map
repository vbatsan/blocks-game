{"version":3,"sources":["store/reducers/app/actions/types.js","components/Field/blockTypes.js","store/reducers/app/actions/index.js","components/Field/Block.js","components/Field/FieldWrapper.js","store/reducers/app/selectors.js","components/Field/index.js","shared/Container.js","components/Controls/Select.js","components/Controls/Input.js","components/Controls/Button.js","service/Api.js","shared/FlexWrapper.js","components/Controls/index.js","components/Notification/Message.js","components/Notification/index.js","shared/Preloader/index.js","components/Board/BoardWrapper.js","shared/Title.js","components/Board/index.js","App.js","store/reducers/app/index.js","store/rootReducer.js","store/index.js","index.js"],"names":["SET_SETTINGS","START_GAME","FINISH_GAME","CLEAR_FIELD","USER_INC","COMPUTER_INC","SET_BLOCKS","NEW_GAME","CHANGE_BLOCK_TYPE","ACTIVE_TO_RED","FILTER_PLAYING_BLOCKS","NO_ACTIVE","ACTIVE","GREEN","RED","changeBlockTypeAction","payload","dispatch","type","filterPlayingBlockAction","id","StyledBlock","styled","div","Block","useDispatch","onClick","FieldWrapper","blocks","Math","sqrt","isGameFinishSelector","state","app","isGameFinish","isGameStartedSelector","isGameStarted","userNameSelector","userName","userCountSelector","userCount","computerCountSelector","computerCount","settingsSelector","settings","blocksSelector","playingBlocksSelector","playingBlocks","clearFieldSelector","clearField","fieldSizeSelector","field","Field","useSelector","useEffect","arr","i","blockOptions","push","length","randomIndex","max","floor","random","currentBlockId","timer","setTimeout","delay","clearTimeout","map","item","Container","Select","select","Input","input","isError","Button","button","axios","then","res","data","post","FlexWrapper","justify","align","direction","flex","Controls","changeField","useState","setSettings","isNewUser","setIsNewUser","name","setName","setIsError","selectRef","useRef","useCallback","handleButton","current","value","style","border","Api","getSettings","ref","defaultValue","onChange","event","target","disabled","Object","keys","toUpperCase","placeholder","Message","p","Notification","fieldSize","preloaderAnimation","keyframes","Preloader","Loader","Spinner","BoardWrapper","Title","h2","Board","setData","isLoading","setIsLoading","winnerData","winner","date","moment","Date","now","format","sendWinner","getWinners","className","App","setSettingsAction","fustify","initialState","rootReducer","combineReducers","action","game","isShowMessage","filter","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","undefined","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a61dbb6.chunk.js","sourcesContent":["export const SET_SETTINGS = 'SET_SETTINGS';\r\nexport const START_GAME = 'START_GAME';\r\nexport const FINISH_GAME = 'FINISH_GAME';\r\nexport const CLEAR_FIELD = 'CLEAR_FIELD';\r\nexport const USER_INC = 'USER_INC';\r\nexport const COMPUTER_INC = 'COMPUTER_INC';\r\nexport const SET_BLOCKS = 'SET_BLOCKS';\r\nexport const NEW_GAME = 'NEW_GAME';\r\nexport const CHANGE_BLOCK_TYPE = 'CHANGE_BLOCK_TYPE';\r\nexport const ACTIVE_TO_RED = 'ACTIVE_TO_RED';\r\nexport const FILTER_PLAYING_BLOCKS = 'FILTER_PLAYING_BLOCKS';","export const NO_ACTIVE = 'NO_ACTIVE';\r\nexport const ACTIVE = 'ACTIVE';\r\nexport const GREEN = 'GREEN';\r\nexport const RED = 'RED';","import {\r\n    SET_SETTINGS,\r\n    FINISH_GAME,\r\n    START_GAME,\r\n    CLEAR_FIELD,\r\n    USER_INC,\r\n    COMPUTER_INC,\r\n    SET_BLOCKS, NEW_GAME, CHANGE_BLOCK_TYPE, ACTIVE_TO_RED, FILTER_PLAYING_BLOCKS,\r\n} from \"./types\";\r\nimport {ACTIVE, GREEN} from \"../../../../components/Field/blockTypes\";\r\n\r\nexport const setSettingsAction = (payload) => (\r\n    {\r\n        type: SET_SETTINGS,\r\n        payload\r\n    }\r\n)\r\n\r\nexport const startGameAction = (payload) => dispatch => {\r\n    dispatch({\r\n        type: START_GAME,\r\n        payload\r\n    })\r\n}\r\n\r\n\r\nexport const finishGameAction = () => dispatch => (\r\n    dispatch({\r\n        type: FINISH_GAME\r\n    })\r\n)\r\n\r\nexport const clearFieldAction = () => dispatch => (\r\n    dispatch({\r\n        type: CLEAR_FIELD\r\n    })\r\n)\r\n\r\nexport const userIncAction = () => ({\r\n    type: USER_INC\r\n})\r\n\r\n\r\nexport const computerIncAction = () => ({\r\n    type: COMPUTER_INC\r\n})\r\n\r\nexport const changeActiveToRedAction = () => ({\r\n    type: ACTIVE_TO_RED\r\n})\r\n\r\nexport const filterPlayingBlockAction = (payload) => ({\r\n    type: FILTER_PLAYING_BLOCKS,\r\n    payload\r\n})\r\n\r\nexport const changeBlockTypeAction = (payload) => dispatch => {\r\n    if(payload.type === ACTIVE) {\r\n        dispatch(filterPlayingBlockAction(payload.id))\r\n        dispatch(changeActiveToRedAction())\r\n    }\r\n    if(payload.type === GREEN) dispatch(userIncAction())\r\n    dispatch({\r\n        type: CHANGE_BLOCK_TYPE,\r\n        payload\r\n    })\r\n}\r\n\r\n\r\nexport const setBlocksAction = (payload) => dispatch => {\r\n    dispatch({\r\n        type: SET_BLOCKS,\r\n        payload\r\n    })\r\n}\r\n\r\nexport const newGameAction = () => dispatch => {\r\n    dispatch({\r\n        type: NEW_GAME\r\n    })\r\n}\r\n\r\n","import React from 'react'\r\nimport styled from \"styled-components\";\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport { changeBlockTypeAction} from \"../../store/reducers/app/actions\";\r\n\r\nimport {ACTIVE, GREEN, NO_ACTIVE, RED} from \"./blockTypes\";\r\n\r\nconst StyledBlock = styled.div`\r\n    width: 50px;\r\n    height: 50px;\r\n    box-sizing: border-box;\r\n    background-color: ${({type}) => {\r\n        switch (type) {\r\n            case ACTIVE:\r\n                return '#46b5ff';\r\n            case NO_ACTIVE:\r\n                return '#5dffca';\r\n            case RED:\r\n                return '#ff2b3b';\r\n            case GREEN:\r\n                return '#229517';\r\n            default:\r\n                return '#5dffca'\r\n        }\r\n}};\r\n    border: 1px solid black;\r\n`;\r\n\r\n function Block({id, type}) {\r\n     const dispatch = useDispatch()\r\n\r\n    function handleClick() {\r\n        if(type === ACTIVE) {\r\n            dispatch(changeBlockTypeAction({id, type: GREEN}))\r\n        }\r\n    }\r\n    return (\r\n        <StyledBlock\r\n            type={type}\r\n            onClick={() => handleClick()}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Block","import styled from  'styled-components';\r\n\r\nconst FieldWrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin: 40px 0;\r\n    width: ${({blocks}) => Math.sqrt(blocks)  * 50}px\r\n`\r\n\r\nexport default FieldWrapper","export const isGameFinishSelector = state => state.app.isGameFinish;\r\nexport const isGameStartedSelector = state => state.app.isGameStarted;\r\nexport const userNameSelector = state => state.app.userName;\r\nexport const userCountSelector = state => state.app.userCount;\r\nexport const computerCountSelector = state => state.app.computerCount;\r\nexport const settingsSelector = state => state.app.settings;\r\nexport const blocksSelector = state => state.app.blocks;\r\nexport const playingBlocksSelector = state => state.app.playingBlocks;\r\nexport const clearFieldSelector = state => state.app.clearField;\r\nexport const fieldSizeSelector = state => state.app.settings.field","import React, { useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport Block from \"./Block\"\r\nimport FieldWrapper from \"./FieldWrapper\";\r\nimport { setBlocksAction, changeBlockTypeAction} from \"../../store/reducers/app/actions\";\r\nimport {ACTIVE, NO_ACTIVE} from \"./blockTypes\";\r\nimport {\r\n    blocksSelector,\r\n    clearFieldSelector,\r\n    isGameStartedSelector,\r\n    playingBlocksSelector\r\n} from \"../../store/reducers/app/selectors\";\r\n\r\nfunction Field({settings}) {\r\n    const isGameStarted = useSelector(isGameStartedSelector)\r\n    const playingBlocks = useSelector(playingBlocksSelector)\r\n    const clearField = useSelector(clearFieldSelector)\r\n    const blocks = useSelector(blocksSelector)\r\n    const dispatch = useDispatch()\r\n\r\n    function random(max) {\r\n        return Math.floor(Math.random()*max)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const arr = [];\r\n        for(let i=0; i < settings.field * settings.field; i++) {\r\n            const blockOptions = {\r\n                id: i,\r\n                type: NO_ACTIVE\r\n            }\r\n            arr.push(blockOptions)\r\n        }\r\n        dispatch(setBlocksAction(arr))\r\n\r\n    },[settings.field, clearField])\r\n\r\n    useEffect(() => {\r\n        if(isGameStarted && playingBlocks.length > 0) {\r\n            const randomIndex = random(playingBlocks.length)\r\n            const currentBlockId = playingBlocks[randomIndex].id\r\n            const timer = setTimeout(() => {\r\n                dispatch(changeBlockTypeAction({id: currentBlockId, type: ACTIVE}))\r\n            }, settings.delay)\r\n            return  () =>  clearTimeout(timer)\r\n        }\r\n    },[playingBlocks,isGameStarted])\r\n\r\n    return (\r\n            <FieldWrapper blocks={blocks.length}>\r\n                {\r\n                    blocks.map(item => <Block id={item.id} key={item.id} type={item.type}/>)\r\n                }\r\n            </FieldWrapper>\r\n    )\r\n}\r\n\r\nexport default Field","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n    max-width: 1600px;\r\n    margin: 0 auto;\r\n`\r\n\r\nexport default Container","\r\nimport styled from 'styled-components';\r\n\r\nconst Select = styled.select`\r\n    border: 1px solid black;\r\n    display: inline-block;\r\n    background: none;\r\n    outline: none;\r\n    font-size: 18px;\r\n    border-radius: 5px;\r\n    width: 200px;\r\n    padding: 15px;\r\n    margin: 0 10px\r\n`\r\n\r\nexport default Select\r\n\r\n","import styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\n    background: none;\r\n    border: ${({isError}) => isError ? '1px solid red': '1px solid black'};\r\n    padding: 15px;\r\n    width: 200px;\r\n    font-size: 18px;\r\n    border-radius: 5px;\r\n    outline: none;\r\n    margin: 0 10px\r\n`\r\n\r\nexport default Input","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    padding: 15px;\r\n    background: none;\r\n    outline: none;\r\n    border: 1px solid black;\r\n    cursor: pointer;\r\n    font-size: 18px;\r\n    transition: .3s;\r\n    width: 300px;\r\n    border-radius: 5px;\r\n    background-color: #C9FFBF;\r\n    &:hover {\r\n        background-color: #FFE9A0\r\n    }\r\n    \r\n`\r\n\r\nexport default Button","import axios from 'axios';\r\n\r\n class Api {\r\n    getSettings() {\r\n        return axios(\"https://starnavi-frontend-test-task.herokuapp.com/game-settings\")\r\n                .then((res) => res.data)\r\n    }\r\n\r\n    getWinners() {\r\n        return axios(\"https://starnavi-frontend-test-task.herokuapp.com/winners\")\r\n                .then((res) => res.data)\r\n\r\n    }\r\n\r\n    sendWinner(data) {\r\n        return axios.post('https://starnavi-frontend-test-task.herokuapp.com/winners', data)\r\n                .then((res) => res.data)\r\n    }\r\n\r\n}\r\n\r\nexport default new Api()\r\n\r\n","import styled from 'styled-components';\r\n\r\nconst FlexWrapper = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: ${({justify}) => justify ? justify : 'start'};\r\n    align-items: ${({align}) => align ? align : 'start'};\r\n    flex-direction: ${({direction}) => direction ? direction : \"row\"};\r\n    flex: ${({flex}) => flex}\r\n`\r\n\r\nexport default FlexWrapper","import React, {useState, useEffect, useRef, useCallback} from 'react'\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport Select from \"./Select\";\r\nimport {startGameAction, clearFieldAction, newGameAction} from \"../../store/reducers/app/actions\";\r\nimport Input from \"./Input\";\r\nimport Button from \"./Button\";\r\nimport Api from \"../../service/Api\";\r\nimport FlexWrapper from \"../../shared/FlexWrapper\";\r\n\r\nfunction Controls({changeField}) {\r\n    const [settings, setSettings] = useState({})\r\n    const [isNewUser, setIsNewUser] = useState(true)\r\n    const [name, setName] = useState('')\r\n    const [isError, setIsError] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const selectRef = useRef()\r\n    const clearField = useCallback(() => dispatch(clearFieldAction()),[dispatch])\r\n\r\n    useEffect(() => {\r\n        Api.getSettings()\r\n            .then((res => setSettings(res)))\r\n    },[])\r\n\r\n    function handleButton() {\r\n        if(name.length < 1) {\r\n            setIsError(true)\r\n            return\r\n        }\r\n        if(selectRef.current.value === '' ) {\r\n            selectRef.current.style.border = '1px solid red'\r\n            return;\r\n        }\r\n        clearField()\r\n        dispatch(startGameAction(name))\r\n        setIsNewUser(false)\r\n\r\n    }\r\n\r\n    function handleInputChange(value) {\r\n        setName(value);\r\n        setIsError(false)\r\n        if(value !== name) setIsNewUser(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <FlexWrapper justify={'center'}>\r\n            <Select\r\n                ref={selectRef}\r\n                defaultValue={''}\r\n                onChange={(event) => {\r\n                    newGameAction()\r\n                    selectRef.current.style.border = '1px solid black'\r\n                    changeField(settings[event.target.value])\r\n                    clearField()\r\n                }}\r\n            >\r\n                <option disabled value={''}>Choose level</option>\r\n                {Object.keys(settings).map(item => <option key={item} value={item}>{item.toUpperCase()}</option>)}\r\n            </Select>\r\n            <Input\r\n                isError={isError}\r\n                placeholder={'Your name'}\r\n                value={name}\r\n                onChange={event => handleInputChange(event.target.value) }\r\n            />\r\n            <Button  onClick={() => handleButton()}>{isNewUser ? 'Play' : 'Play again'}</Button>\r\n        </FlexWrapper>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Controls","import styled from 'styled-components';\r\n\r\nconst Message = styled.p`\r\n    padding: 10px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 18px\r\n`\r\n\r\nexport default Message","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\n\r\nimport Message from \"./Message\";\r\nimport {finishGameAction} from \"../../store/reducers/app/actions\";\r\nimport {\r\n    computerCountSelector,\r\n    fieldSizeSelector,\r\n    isGameFinishSelector,\r\n    userCountSelector, userNameSelector\r\n} from \"../../store/reducers/app/selectors\";\r\n\r\nfunction Notification() {\r\n    const userCount = useSelector(userCountSelector)\r\n    const computerCount = useSelector(computerCountSelector)\r\n    const fieldSize = useSelector(fieldSizeSelector)\r\n    const isGameFinish = useSelector(isGameFinishSelector)\r\n    const userName = useSelector(userNameSelector)\r\n    const dispatch = useDispatch()\r\n\r\n     useEffect(() => {\r\n         if(computerCount > (fieldSize * fieldSize /2) || userCount > (fieldSize * fieldSize /2)){\r\n             dispatch(finishGameAction())\r\n         }\r\n     }, [userCount, computerCount])\r\n\r\n    return isGameFinish &&\r\n        <Message>\r\n            {userCount > computerCount ? userName : 'Computer'} won!\r\n        </Message>\r\n}\r\n\r\nexport default Notification\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport styled, {keyframes} from 'styled-components'\r\n\r\nconst preloaderAnimation = keyframes`\r\n\t0% {\r\n         -webkit-transform: rotate(0deg);\r\n         -ms-transform: rotate(0deg);\r\n         transform: rotate(0deg);\r\n      }\r\n    100% {\r\n         -webkit-transform: rotate(360deg);\r\n         -ms-transform: rotate(360deg);\r\n         transform: rotate(360deg);\r\n      }\r\n`\r\n\r\nconst Preloader = styled.div`\r\n\t position: absolute;\r\n     top: 0;\r\n     left: 0;\r\n     width: 100%;\r\n     height: 100%;\r\n`\r\nconst Loader = styled.div`\r\n\t  display: block;\r\n      position: relative;\r\n      left: 50%;\r\n      top: 50%;\r\n      width: 150px;\r\n      height: 150px;\r\n      margin: -75px 0 0 -75px;\r\n      border-radius: 50%;\r\n      border: 3px solid transparent;\r\n      border-top-color: #9370DB;\r\n      -webkit-animation: spin 2s linear infinite;\r\n      animation: ${preloaderAnimation} 2s linear infinite;\r\n      &:after {\r\n      \t content: \"\";\r\n\t\t position: absolute;\r\n\t\t top: 15px;\r\n\t\t left: 15px;\r\n\t\t right: 15px;\r\n\t\t bottom: 15px;\r\n\t\t border-radius: 50%;\r\n\t\t border: 3px solid transparent;\r\n\t\t border-top-color: rgb(11, 156, 100);\r\n\t\t -webkit-animation: spin 1.5s linear infinite;\r\n\t\t animation: ${preloaderAnimation} 1.5s linear infinite;\r\n      };\r\n      &:before {\r\n      \t content: \"\";\r\n\t\t position: absolute;\r\n\t\t top: 5px;\r\n\t\t left: 5px;\r\n\t\t right: 5px;\r\n\t\t bottom: 5px;\r\n\t\t border-radius: 50%;\r\n\t\t border: 3px solid transparent;\r\n\t\t border-top-color: rgb(17, 211, 201);\r\n\t\t -webkit-animation: spin 3s linear infinite;\r\n\t\t animation: ${preloaderAnimation} 3s linear infinite;\r\n      }\r\n`\r\nconst Spinner = () => {\r\n\treturn <Preloader><Loader/></Preloader>\r\n}\r\nexport default Spinner\r\n\r\n","import styled from \"styled-components\"\r\n\r\nconst BoardWrapper = styled.div`\r\n    max-width: 450px;\r\n    min-width: 375px;\r\n    height: 80vh;\r\n    position: relative;\r\n    padding: 20px;\r\n    margin: 40px 0; \r\n    background-color: rgba(255,255,255, .4);\r\n    overflow-y: scroll;\r\n`\r\n\r\nexport default BoardWrapper","import styled from 'styled-components';\r\n\r\nconst Title = styled.h2`\r\n    text-align: center;\r\n`\r\n\r\nexport default Title","import React, {useState, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux';\r\nimport moment from \"moment\";\r\n\r\nimport Api from '../../service/Api'\r\nimport Preloader from '../../shared/Preloader'\r\nimport BoardWrapper from \"./BoardWrapper\";\r\nimport Title from \"../../shared/Title\";\r\nimport {\r\n    computerCountSelector,\r\n    isGameFinishSelector,\r\n    userCountSelector,\r\n    userNameSelector\r\n} from \"../../store/reducers/app/selectors\";\r\n\r\n\r\nfunction Board() {\r\n    const [data, setData] = useState([])\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const isGameFinish = useSelector(isGameFinishSelector)\r\n    const userCount = useSelector(userCountSelector)\r\n    const computerCount = useSelector(computerCountSelector)\r\n    const userName = useSelector(userNameSelector)\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true)\r\n        if(isGameFinish) {\r\n            const winnerData = {\r\n                winner: userCount > computerCount ? userName : \"Computer\",\r\n                date: moment(Date.now()).format(\"llll\")\r\n            }\r\n            Api.sendWinner(winnerData)\r\n                .then(() => {\r\n                    Api.getWinners()\r\n                        .then(res => {\r\n                            setData(res)\r\n                            setIsLoading(false)\r\n                        })\r\n                })\r\n        }else {\r\n            Api.getWinners()\r\n                .then(res => {\r\n                    setData(res)\r\n                    setIsLoading(false)\r\n                })\r\n        }\r\n\r\n    },[isGameFinish])\r\n    return(\r\n        <BoardWrapper>\r\n            <Title>Leader bord</Title>\r\n            {isLoading && <Preloader/>}\r\n            <ul className='list'>\r\n                {data?.map(item => (\r\n                    <li className='list-item' key={item.id}>\r\n                        <span>{item.winner}</span>\r\n                        <span>{item.date}</span>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </BoardWrapper>\r\n    )\r\n}\r\n\r\nexport default Board","import React, {useCallback} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport Field from \"./components/Field\";\nimport Container from './shared/Container'\nimport Controls from \"./components/Controls\";\nimport {setSettingsAction} from \"./store/reducers/app/actions\";\nimport Notification from \"./components/Notification\";\nimport Board from \"./components/Board\";\nimport FlexWrapper from \"./shared/FlexWrapper\";\nimport {settingsSelector} from \"./store/reducers/app/selectors\";\n\nfunction App() {\n    const settings = useSelector(settingsSelector)\n    const dispatch = useDispatch()\n    const setSettings = useCallback((payload) => dispatch(setSettingsAction(payload)), [dispatch])\n  return (\n          <Container>\n              <div className={'main-wrapper'}>\n                  <FlexWrapper fustify={'center'} direction={'column'} align={'center'} flex={1}>\n                      <Controls changeField={setSettings}/>\n                      <Notification/>\n                  </FlexWrapper>\n                  <FlexWrapper justify={'space-around'}>\n                  {settings && <Field settings={settings}/> }\n                      <Board/>\n                  </FlexWrapper>\n              </div>\n\n          </Container>\n  );\n}\n\nexport default App\n","import {\r\n    SET_SETTINGS,\r\n    START_GAME,\r\n    FINISH_GAME,\r\n    CLEAR_FIELD,\r\n    USER_INC,\r\n    COMPUTER_INC,\r\n    SET_BLOCKS, NEW_GAME, CHANGE_BLOCK_TYPE, ACTIVE_TO_RED, FILTER_PLAYING_BLOCKS\r\n} from \"./actions/types\";\r\nimport {ACTIVE, RED} from \"../../../components/Field/blockTypes\";\r\n\r\nconst initialState = {\r\n    isGameStarted: false,\r\n    isGameFinish: false,\r\n    settings: {\r\n        field: 0,\r\n        delay: 0\r\n    },\r\n    userName: '',\r\n    clearField: false,\r\n    userCount: 0,\r\n    computerCount: 0,\r\n    blocks: [],\r\n    playingBlocks:[]\r\n};\r\n\r\nexport default function reducer (state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"FINISH\":\r\n            return {\r\n                ...state,\r\n                game: \"FINISHED\"\r\n            };\r\n        case SET_SETTINGS:\r\n            return {\r\n                ...state,\r\n                settings: action.payload\r\n            };\r\n        case START_GAME:\r\n            return {\r\n                ...state,\r\n                isGameStarted: true,\r\n                isGameFinish: false,\r\n                userName: action.payload,\r\n                userCount: 0,\r\n                computerCount: 0,\r\n                isShowMessage: false\r\n            };\r\n        case FINISH_GAME:\r\n            return {\r\n                ...state,\r\n                isGameStarted: false,\r\n                isGameFinish: true,\r\n                isShowMessage: true\r\n            };\r\n        case CLEAR_FIELD:\r\n            return {\r\n                ...state,\r\n                clearField: !state.clearField\r\n            };\r\n        case USER_INC:\r\n            return {\r\n                ...state,\r\n                userCount: state.userCount + 1\r\n            };\r\n        case COMPUTER_INC:\r\n            return {\r\n                ...state,\r\n                computerCount: state.computerCount + 1\r\n            };\r\n        case SET_BLOCKS:\r\n            return {\r\n                ...state,\r\n                blocks: action.payload,\r\n                playingBlocks: action.payload\r\n            };\r\n        case ACTIVE_TO_RED:\r\n            return {\r\n                ...state,\r\n                blocks: state.blocks.map(item => {\r\n                    if(item.type === ACTIVE) item.type = RED;\r\n                    return item\r\n                }),\r\n                computerCount: state.blocks.filter(item => item.type === RED).length\r\n            };\r\n        case FILTER_PLAYING_BLOCKS:\r\n            return {\r\n                ...state,\r\n                playingBlocks: state.playingBlocks.filter(item => item.id !== action.payload)\r\n            }\r\n        case CHANGE_BLOCK_TYPE:\r\n            return {\r\n                ...state,\r\n                blocks: state.blocks.map(item => {\r\n                    if(item.id === action.payload.id) {\r\n                       return {\r\n                           ...item,\r\n                           type: action.payload.type\r\n                       }\r\n                    }else return item;\r\n                })\r\n            };\r\n        case NEW_GAME:\r\n            return {\r\n                ...state,\r\n                isGameStarted: false\r\n            };\r\n        default:\r\n                return state\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\n\r\nimport appReducer from \"./reducers/app\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer\r\n});\r\n\r\nexport default rootReducer;","import thunk from 'redux-thunk';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\n\r\nimport rootReducer from './rootReducer';\r\n\r\nconst enhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    undefined,\r\n    enhancer(applyMiddleware(thunk)),\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}